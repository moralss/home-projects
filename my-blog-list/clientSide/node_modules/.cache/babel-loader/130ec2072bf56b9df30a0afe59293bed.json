{"ast":null,"code":"import _regeneratorRuntime from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/src/container/AddComments.js\";\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport { connect } from \"react-redux\";\nimport * as thunks from \"../action/thunk\";\nimport Profile from \"./Profile\";\nimport { reduxForm, Field } from \"redux-form\";\nimport history from '../history';\n\nvar AddComments =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddComments, _Component);\n\n  function AddComments() {\n    var _this;\n\n    _classCallCheck(this, AddComments);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddComments).call(this));\n\n    _this.getAllComments =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(blogId) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.props.getAllComments(blogId);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.addComment =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(blogInfo) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.props.addComment(blogInfo);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleSubmit = function (data) {\n      var blogId = _this.props.match.params.blogid;\n      var blogInfo = {\n        id: blogId,\n        text: data.text\n      };\n\n      _this.addComment(blogInfo);\n\n      history.push(\"/viewcomments/\".concat(data.id));\n    };\n\n    return _this;\n  }\n\n  _createClass(AddComments, [{\n    key: \"render\",\n    value: function render() {\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(\"div\", {\n        className: \"Commits\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Profile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.handleSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Field, {\n        type: \"text\",\n        name: \"text\",\n        value: \"name\",\n        component: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AddComments;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    authorBlogs: state.profile.authorsBlogs\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addComment: function addComment(blogId) {\n      return dispatch(thunks.addComment(blogId));\n    },\n    getAllComments: function getAllComments(blogId) {\n      return dispatch(thunks.getAllComments(blogId));\n    }\n  };\n}\n\nvar CommentFormConfig = reduxForm({\n  form: \"addComment\"\n})(AddComments);\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentFormConfig);","map":{"version":3,"sources":["/home/moral/Documents/home-projects/my-blog-list/clientSide/setup/src/container/AddComments.js"],"names":["React","Component","connect","thunks","Profile","reduxForm","Field","history","AddComments","getAllComments","blogId","props","addComment","blogInfo","handleSubmit","data","match","params","blogid","id","text","push","mapStateToProps","state","authorBlogs","profile","authorsBlogs","mapDispatchToProps","dispatch","CommentFormConfig","form"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { connect } from \"react-redux\";\nimport * as thunks from \"../action/thunk\";\nimport Profile from \"./Profile\";\nimport { reduxForm, Field } from \"redux-form\";\nimport history from '../history';\n\nclass AddComments extends Component {\n    constructor() {\n        super()\n    }\n\n    getAllComments = async (blogId) => {\n        await this.props.getAllComments(blogId);\n\n    }\n\n    addComment = async (blogInfo) => {\n        await this.props.addComment(blogInfo);\n    }\n\n    handleSubmit = (data) => {\n        const blogId = this.props.match.params.blogid;\n        const blogInfo = { id: blogId, text: data.text };\n        this.addComment(blogInfo);\n        history.push(`/viewcomments/${data.id}`);\n\n    }\n\n    render() {\n        const { handleSubmit } = this.props;\n\n\n        return (\n            <div className=\"Commits\">\n                <Profile />\n                <form onSubmit={handleSubmit(this.handleSubmit)}>\n                    <Field type=\"text\" name=\"text\" value=\"name\" component=\"input\" />\n                    <input type=\"submit\" />\n\n                </form>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        authorBlogs: state.profile.authorsBlogs,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addComment: (blogId) => dispatch(thunks.addComment(blogId)),\n        getAllComments: (blogId) =>\n            dispatch(thunks.getAllComments(blogId)),\n\n    };\n}\n\n\n\nconst CommentFormConfig = reduxForm({\n    form: \"addComment\"\n})(AddComments);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CommentFormConfig);\n"]},"metadata":{},"sourceType":"module"}